'''
Exercise 1: Ti·∫øp t·ª•c v·ªõi Database Testing System
Question 1: T·∫°o store ƒë·ªÉ ng∆∞·ªùi d√πng nh·∫≠p v√†o t√™n ph√≤ng ban v√† in ra t·∫•t c·∫£ c√°c account thu·ªôc ph√≤ng ban ƒë√≥
'''
USE TESTINGSYSTEM;
DROP PROCEDURE IF EXISTS sp_GetAccFromDep; 
DELIMITER $$
CREATE PROCEDURE sp_GetAccFromDep(IN in_dep_name NVARCHAR(50)) BEGIN
 	SELECT A.AccountID, A.FullName, D.DepartmentName FROM `account` A
 	INNER JOIN department D ON D.DepartmentID = A.DepartmentID
 	WHERE D.DepartmentName = in_dep_name; 
END$$
DELIMITER ;
Call sp_GetAccFromDep('Sale');
''' Question 2: T·∫°o store ƒë·ªÉ in ra s·ªë l∆∞·ª£ng account trong m·ªói group
'''
DROP PROCEDURE IF EXISTS sp_GetCountAccFromGroup; 
DELIMITER $$
CREATE PROCEDURE sp_GetCountAccFromGroup(IN in_group_name NVARCHAR(50)) BEGIN
 	SELECT g.GroupName, count(ga.AccountID) AS SL FROM groupaccount ga
 	INNER JOIN `group` g ON ga.GroupID = g.GroupID
 	WHERE g.GroupName = in_group_name; 
END$$
DELIMITER ;
Call sp_GetCountAccFromGroup('Testing System');
'''
Question 3: T·∫°o store ƒë·ªÉ th·ªëng k√™ m·ªói type question c√≥ bao nhi√™u question ƒë∆∞·ª£c t·∫°o trong th√°ng hi·ªán t·∫°i
'''
DROP PROCEDURE IF EXISTS sp_GetCountTypeInMonth; 
DELIMITER $$
CREATE PROCEDURE sp_GetCountTypeInMonth() BEGIN
	SELECT tq.TypeName, count(q.TypeID) 
	FROM question q 
	INNER JOIN typequestion tq ON q.TypeID = tq.TypeID
	WHERE month(q.CreateDate) = month(now()) AND year(q.CreateDate) = year(now()) 
	GROUP BY q.TypeID;
END$$ 
DELIMITER ;
Call sp_GetCountTypeInMonth();

'''
Question 4: T·∫°o store ƒë·ªÉ tr·∫£ ra id c·ªßa type question c√≥ nhi·ªÅu c√¢u h·ªèi nh·∫•t
'''
DROP PROCEDURE IF EXISTS sp_GetCountQuesFromType;
DELIMITER $$
CREATE PROCEDURE sp_GetCountQuesFromType() BEGIN
 	WITH CTE_MaxTypeID AS(
 	SELECT count(q.TypeID) AS SL FROM question q

 	)
 	SELECT tq.TypeName, count(q.TypeID) AS SL FROM question q
 	INNER JOIN typequestion tq ON tq.TypeID = q.TypeID
 	GROUP BY q.TypeID
	HAVING count(q.TypeID) = (SELECT MAX(SL) FROM CTE_MaxTypeID);
END$$ 
DELIMITER ;
Call sp_GetCountQuesFromType
DROP PROCEDURE IF EXISTS sp_GetCountQuesFromType; 
DELIMITER $$
CREATE PROCEDURE sp_GetCountQuesFromType(OUT v_ID TINYINT) BEGIN
 	WITH CTE_CountTypeID AS (
 	SELECT count(q.TypeID) AS SL FROM question q
 	GROUP BY q.TypeID)
 	SELECT q.TypeID INTO v_ID FROM question q
 	GROUP BY q.TypeID
 	HAVING COUNT(q.TypeID) = (SELECT max(SL) FROM CTE_CountTypeID);
END$$ DELIMITER ;

SET @ID =0;
Call sp_GetCountQuesFromType(@ID);

SELECT @ID;
'''
Question 5: S·ª≠ d·ª•ng store ·ªü question 4 ƒë·ªÉ t√¨m ra t√™n c·ªßa type question
'''
DROP PROCEDURE IF EXISTS sp_GetCountQuesFromType; 
DELIMITER $$
CREATE PROCEDURE sp_GetCountQuesFromType() BEGIN
 	WITH CTE_MaxTypeID AS(
 	SELECT count(q.TypeID) AS SL FROM question q
 	)
 	SELECT tq.TypeName, count(q.TypeID) AS SL 
    FROM question q
 	INNER JOIN typequestion tq ON tq.TypeID = q.TypeID
 	GROUP BY q.TypeID
 	HAVING count(q.TypeID) = (SELECT MAX(SL) FROM CTE_MaxTypeID);
END$$ 
DELIMITER ;
Call sp_GetCountQuesFromType();
SET @ID =0;
Call sp_GetCountQuesFromType(@ID);
SELECT * FROM typequestion WHERE TypeID = @ID;

'''
Question 6: Vi·∫øt 1 store cho ph√©p ng∆∞·ªùi d√πng nh·∫≠p v√†o 1 chu·ªói v√† tr·∫£ v·ªÅ group c√≥ t√™n ch·ª©a chu·ªói c·ªßa ng∆∞·ªùi d√πng nh·∫≠p v√†o ho·∫∑c tr·∫£ v·ªÅ user c√≥ username ch·ª©a
chu·ªói c·ªßa ng∆∞·ªùi d√πng nh·∫≠p v√†o
ü°∫Trong b√†i t·∫≠p n√†y c√≥ th·ªÉ s·ª≠ d·ª•ng Union ƒë·ªÉ join sau khi select 2 b·∫£ng. k c·∫ßn s·ª≠ d·ª•ng c·ªù.
'''
SET @ID =0;
Call sp_GetCountQuesFromType(@ID);
SELECT * FROM typequestion WHERE TypeID = @ID;
CREATE PROCEDURE sp_getNameAccOrNameGroup ( IN var_String VARCHAR(50)
) BEGIN
 	SELECT g.GroupName FROM `group` g WHERE g.GroupName LIKE CONCAT("%",var_String,"%")
 	UNION
 	SELECT a.Username FROM `account` a WHERE a.Username LIKE CONCAT("%",var_String,"%")
END$$
DELIMITER ;
Call sp_getNameAccOrNameGroup('s');
DROP PROCEDURE IF EXISTS sp_getNameAccOrNameGroup; DELIMITER $$
DELIMITER $$
CREATE PROCEDURE sp_getNameAccOrNameGroup (IN var_String VARCHAR(50), IN flag INT)
BEGIN
    IF flag = 1 THEN
        -- This section handles the condition to get group names matching the input string
        SELECT g.GroupName 
        FROM `group` g 
        WHERE g.GroupName LIKE CONCAT("%", var_String, "%");
    ELSE
        -- This section handles the condition when flag != 1, to find users whose username contains the input string
        SELECT a.Username 
        FROM `account` a 
        WHERE a.Username LIKE CONCAT("%", var_String, "%");
    END IF;
END$$
DELIMITER ;
Call sp_getNameAccOrNameGroup('s',1);
DROP PROCEDURE IF EXISTS sp_getNameAccOrNameGroup_Union; DELIMITER $$
CREATE PROCEDURE sp_getNameAccOrNameGroup_Union ( IN var_String VARCHAR(50))
BEGIN
 	SELECT g.GroupName AS Name_Group_Username FROM `group` g WHERE g.GroupName LIKE CONCAT("%",var_String,"%")
 	UNION
 	SELECT a.Username FROM `account` a WHERE a.Username LIKE CONCAT("%",var_String,"%");
END$$ DELIMITER ;
Call sp_getNameAccOrNameGroup_Union('te');
-----
DROP PROCEDURE IF EXISTS sp_getNameAccOrNameGroup_Union;
DELIMITER $$
CREATE PROCEDURE sp_getNameAccOrNameGroup_Union ( IN var_String VARCHAR(50))
BEGIN
 	SELECT g.GroupName AS Name_Group_Username FROM `group` g WHERE g.GroupName LIKE CONCAT("%",var_String,"%")
 	UNION
 	SELECT a.Username FROM `account` a WHERE a.Username LIKE CONCAT("%",var_String,"%");
END$$ 
DELIMITER ;
Call sp_getNameAccOrNameGroup_Union('te');
'''
Question 7: Vi·∫øt 1 store cho ph√©p ng∆∞·ªùi d√πng nh·∫≠p v√†o th√¥ng tin fullName, email v√† trong store s·∫Ω t·ª± ƒë·ªông g√°n:
username s·∫Ω gi·ªëng email nh∆∞ng b·ªè ph·∫ßn @..mail ƒëi positionID: s·∫Ω c√≥ default l√† developer departmentID: s·∫Ω ƒë∆∞·ª£c cho v√†o 1 ph√≤ng ch·ªù
Sau ƒë√≥ in ra k·∫øt qu·∫£ t·∫°o th√†nh c√¥ng
ü°∫ Ch√∫ √Ω: Khi khai b√°o c√°c bi·∫øn DECLARE th√¨ kh√¥ng s·ª≠ d·ª•ng t·ª´ kh√≥a NOT NULL trong
thu·ªôc t√≠nh.
'''
-------
DROP PROCEDURE IF EXISTS sp_insertAccount; 
DELIMITER $$
CREATE PROCEDURE sp_insertAccount (	IN var_Email VARCHAR(50),
 	IN var_Fullname VARCHAR(50)) BEGIN
 	DECLARE v_Username VARCHAR(50) DEFAULT SUBSTRING_INDEX(var_Email, '@', 1);
 	DECLARE v_DepartmentID TINYINT UNSIGNED DEFAULT 11;
 	DECLARE v_PositionID TINYINT UNSIGNED DEFAULT 1;
 	DECLARE v_CreateDate DATETIME DEFAULT now();
INSERT INTO `account` (`Email`,	`Username`,	`FullName`,`DepartmentID`,	`PositionID`,	`CreateDate`)
VALUES (var_Email,	v_Username,	var_Fullname,v_DepartmentID,	v_PositionID,	v_CreateDate);
END$$ 
DELIMITER ;
Call sp_insertAccount('daonq@viettel.com.vn','Nguyen dao');
--- Question 8: Vi·∫øt 1 store cho ph√©p ng∆∞·ªùi d√πng nh·∫≠p v√†o Essay ho·∫∑c Multiple-Choice ƒë·ªÉ th·ªëng k√™ c√¢u h·ªèi essay ho·∫∑c multiple-choice n√†o c√≥ content d√†i nh·∫•t

DROP PROCEDURE IF EXISTS sp_getMaxNameQuesFormNameType;
DELIMITER $$

CREATE PROCEDURE sp_getMaxNameQuesFormNameType (IN var_Choice VARCHAR(50))
BEGIN
    DECLARE v_TypeID TINYINT UNSIGNED;
    
    -- Get the TypeID based on the provided TypeName
    SELECT tq.TypeID INTO v_TypeID 
    FROM typequestion tq
    WHERE tq.TypeName = var_Choice;

    -- Check the choice and execute corresponding query
    IF var_Choice = 'Essay' THEN
        -- Find the longest Essay content
        SELECT * 
        FROM question q
        WHERE q.TypeID = v_TypeID
        AND LENGTH(q.Content) = (
            SELECT MAX(LENGTH(q2.Content))
            FROM question q2
            WHERE q2.TypeID = v_TypeID
        );
    ELSEIF var_Choice = 'Multiple-Choice' THEN
        -- Find the longest Multiple-Choice content
        SELECT * 
        FROM question q
        WHERE q.TypeID = v_TypeID
        AND LENGTH(q.Content) = (
            SELECT MAX(LENGTH(q2.Content))
            FROM question q2
            WHERE q2.TypeID = v_TypeID
        );
    END IF;
END$$
DELIMITER ;

'''
Question 9: Vi·∫øt 1 store cho ph√©p ng∆∞·ªùi d√πng x√≥a exam d·ª±a v√†o ID
B·∫£ng Exam c√≥ li√™n k·∫øt kh√≥a ngo·∫°i ƒë·∫øn b·∫£ng examquestion v√¨ v·∫≠y tr∆∞·ªõc khi x√≥a d·ªØ li·ªáu trong b·∫£ng exam c·∫ßn x√≥a d·ªØ li·ªáu trong b·∫£ng examquestion tr∆∞·ªõc
'''
DROP PROCEDURE IF EXISTS sp_DeleteExamWithID; DELIMITER $$
CREATE PROCEDURE sp_DeleteExamWithID (IN in_ExamID TINYINT UNSIGNED) BEGIN
 	DELETE FROM examquestion WHERE	ExamID = in_ExamID;

END$$ DELIMITER ;

CALL sp_DeleteExamWithID(7);
'''
Question 10: T√¨m ra c√°c exam ƒë∆∞·ª£c t·∫°o t·ª´ 3 nƒÉm tr∆∞·ªõc v√† x√≥a c√°c exam ƒë√≥ ƒëi (s·ª≠ d·ª•ng store ·ªü c√¢u 9 ƒë·ªÉ x√≥a)
Sau ƒë√≥ in s·ªë l∆∞·ª£ng record ƒë√£ remove t·ª´ c√°c table li√™n quan trong khi removing

'''
DROP PROCEDURE IF EXISTS SP_DeleteExamBefore3Year; DELIMITER $$
CREATE PROCEDURE SP_DeleteExamBefore3Year() BEGIN
DROP PROCEDURE IF EXISTS sp_getMaxNameQuesFormNameType;
DELIMITER $$

CREATE PROCEDURE sp_getMaxNameQuesFormNameType (IN var_Choice VARCHAR(50))
BEGIN
    DECLARE v_TypeID TINYINT UNSIGNED;
    
    -- Get the TypeID based on the provided TypeName
    SELECT tq.TypeID INTO v_TypeID 
    FROM typequestion tq
    WHERE tq.TypeName = var_Choice;

    -- Check the choice and execute corresponding query
    IF var_Choice = 'Essay' THEN
        -- Find the longest Essay content
        SELECT * 
        FROM question q
        WHERE q.TypeID = v_TypeID
        AND LENGTH(q.Content) = (
            SELECT MAX(LENGTH(q2.Content))
            FROM question q2
            WHERE q2.TypeID = v_TypeID
        );
    ELSEIF var_Choice = 'Multiple-Choice' THEN
        -- Find the longest Multiple-Choice content
        SELECT * 
        FROM question q
        WHERE q.TypeID = v_TypeID
        AND LENGTH(q.Content) = (
            SELECT MAX(LENGTH(q2.Content))
            FROM question q2
            WHERE q2.TypeID = v_TypeID
        );
    END IF;
END$$

DELIMITER ;
'''
Question 11: Vi·∫øt store cho ph√©p ng∆∞·ªùi d√πng x√≥a ph√≤ng ban b·∫±ng c√°ch ng∆∞·ªùi d√πng nh·∫≠p v√†o t√™n ph√≤ng ban v√† c√°c account thu·ªôc ph√≤ng ban ƒë√≥ s·∫Ω ƒë∆∞·ª£c chuy·ªÉn v·ªÅ ph√≤ng ban default l√† ph√≤ng ban ch·ªù
'''
DROP PROCEDURE IF EXISTS SP_DelDepFromName;
DELIMITER $$

CREATE PROCEDURE SP_DelDepFromName(IN var_DepartmentName VARCHAR(30))
BEGIN
    DECLARE v_DepartmentID VARCHAR(30);
    -- Start a transaction
    START TRANSACTION;
    -- Retrieve the DepartmentID for the given DepartmentName
    SELECT D1.DepartmentID INTO v_DepartmentID
    FROM department D1
    WHERE D1.DepartmentName = var_DepartmentName;
    -- Check if the department exists
    IF v_DepartmentID IS NOT NULL THEN
        -- Update accounts to the default DepartmentID ('11')
        UPDATE account A
        SET A.DepartmentID = '11' WHERE A.DepartmentID = v_DepartmentID;
        DELETE FROM department d WHERE d.DepartmentName = var_DepartmentName;
        -- Commit the transaction
        COMMIT;
    ELSE
        -- Rollback the transaction if the department does not exist
        ROLLBACK;
    END IF;
END$$

DELIMITER ;
'''
Question 12: Vi·∫øt store ƒë·ªÉ in ra m·ªói th√°ng c√≥ bao nhi√™u c√¢u h·ªèi ƒë∆∞·ª£c t·∫°o trong nƒÉm nay.
C√°c b∆∞·ªõc l√†m:
-	S·ª≠ d·ª•ng CTE t·∫°o 1 b·∫£ng t·∫°m CTE_12Months ƒë·ªÉ l∆∞u th√¥ng tin 12 th√°ng
-	S·ª≠ d·ª•ng JOIN k·∫øt h·ª£p ƒëi·ªÅu ki·ªán ON l√† M.MONTH = month(Q.CreateDate), ·ªü ƒë√¢y ON l√† 1 h√†m c·ªßa CreateDate

'''
DROP PROCEDURE IF EXISTS sp_CountQuesInMonth;
DELIMITER $$
CREATE PROCEDURE sp_CountQuesInMonth()
BEGIN
    -- Common Table Expression (CTE) to generate 12 months
    WITH CTE_12Months AS (
        SELECT 1 AS MONTH UNION 
        SELECT 2 AS MONTH UNION 
        SELECT 3 AS MONTH UNION 
        SELECT 4 AS MONTH UNION 
        SELECT 5 AS MONTH UNION 
        SELECT 6 AS MONTH UNION 
        SELECT 7 AS MONTH UNION 
        SELECT 8 AS MONTH UNION 
        SELECT 9 AS MONTH UNION 
        SELECT 10 AS MONTH UNION 
        SELECT 11 AS MONTH UNION 
        SELECT 12 AS MONTH
    )
    -- Join the CTE with the question table to count questions per month
    SELECT 
        M.MONTH, 
        COUNT(Q.CreateDate) AS SL 
    FROM 
        CTE_12Months M
    LEFT JOIN 
        (SELECT * FROM question Q1 WHERE YEAR(Q1.CreateDate) = YEAR(NOW())) Q 
    ON 
        M.MONTH = MONTH(Q.CreateDate)
    GROUP BY 
        M.MONTH;
END$$

DELIMITER ;

-- Call the stored procedure
CALL sp_CountQuesInMonth();
'''
Question 13: Vi·∫øt store ƒë·ªÉ in ra m·ªói th√°ng c√≥ bao nhi√™u c√¢u h·ªèi ƒë∆∞·ª£c t·∫°o trong 6 th√°ng g·∫ßn ƒë√¢y nh·∫•t
(N·∫øu th√°ng n√†o kh√¥ng c√≥ th√¨ s·∫Ω in ra l√† "kh√¥ng c√≥ c√¢u h·ªèi n√†o trong th√°ng")

'''
DROP PROCEDURE IF EXISTS sp_CountQuesBefore6Month; DELIMITER $$
CREATE PROCEDURE sp_CountQuesBefore6Month() BEGIN
 	WITH CTE_Talbe_6MonthBefore AS (
 	SELECT MONTH(DATE_SUB(NOW(), INTERVAL 5 MONTH)) AS MONTH, YEAR(DATE_SUB(NOW(), INTERVAL 5 MONTH)) AS `YEAR`
 	UNION
 	SELECT MONTH(DATE_SUB(NOW(), INTERVAL 4 MONTH)) AS MONTH, YEAR(DATE_SUB(NOW(), INTERVAL 4 MONTH)) AS `YEAR`
 	UNION
 	SELECT MONTH(DATE_SUB(NOW(), INTERVAL 3 MONTH)) AS MONTH, YEAR(DATE_SUB(NOW(), INTERVAL 3 MONTH)) AS `YEAR`
 	UNION
 	SELECT MONTH(DATE_SUB(NOW(), INTERVAL 2 MONTH)) AS MONTH, YEAR(DATE_SUB(NOW(), INTERVAL 2 MONTH)) AS `YEAR`

	UNION
 	SELECT MONTH(DATE_SUB(NOW(), INTERVAL 1 MONTH)) AS MONTH, YEAR(DATE_SUB(NOW(), INTERVAL 1 MONTH)) AS `YEAR`
 	UNION
	)
 	SELECT M.MONTH,M.YEAR, CASE
 	WHEN COUNT(QuestionID) = 0 THEN 'kh√¥ng c√≥ c√¢u h·ªèi n√†o trong th√°ng'
 	ELSE COUNT(QuestionID)
 	END AS SL
 	FROM CTE_Talbe_6MonthBefore M
 	LEFT JOIN (SELECT * FROM question where CreateDate >= DATE_SUB(NOW(), INTERVAL 6 MONTH) AND CreateDate <= now()) AS Sub_Question ON M.MONTH = MONTH(CreateDate)
 	GROUP BY M.MONTH
 	ORDER BY M.MONTH ASC;
END$$ DELIMITER ;
